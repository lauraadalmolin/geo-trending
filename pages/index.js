import React, { useEffect, useState } from 'react';
import { debounce } from 'lodash';

import Tweet from '../components/tweet';
import SkeletonTweets from '../components/skeleton-tweets';

import styles from '../styles/Home.module.css'

const googleMapsAPIKey = process.env.GOOGLE_MAPS_API_KEY;

// Cria√ß√£o do componente principal
export default function Home() {
  
  // Cria√ß√£o do estado de endere√ßo, setando o estado inicial como Rio+Grande+RS
  const [address, setAddress] = useState('Rio+Grande+RS');
  
  // Cria√ß√£o do array de tweets, inicialmente vazio, pois ainda n√£o chamou-se a API
  const [tweets, setTweets] = useState([]);

  // Fun√ß√£o handler do evento de mudan√ßa no input field
  const changeAddressHandler = (event) => {
    // Chama a fun√ß√£o de busca com debounce
    debouncedSearch(event.target.value);
  };

  // Fun√ß√£o de busca com debounce:
  // A fun√ß√£o ser√° chamada com um atraso, ou seja, 
  // s√≥ ser√° chamada 300 milissegundos depois que o usu√°rio 
  // parar de digitar na barra de busca
  const debouncedSearch = debounce(async (value) => {
    // Caso o usu√°rio tenha zerado a barra de busca nada √© feito
    if (!value) return;

    // Caso o usu√°rio tenha inputado um valor v√°lido, seta-se o novo endere√ßo
    setAddress(value);

    // Em seguida, busca-se os valores de latitude e longitude para o novo endere√ßo
    getGeoLocation(value);
  }, 300);

  // Essa fun√ßao pega a geolocaliza√ß√£o dos tweets atraves da rota da api citada abaixo
  // de acordo om o endere√ßo utilizado, s√£o extraidos os dados de latitude e longitude do
  // json e repassados para o metodo getTweets, que ira retornar os tweets esperados
  const getGeoLocation = async (address) => {
    try {
      setTweets([]);
      const url = `https://geo-trending-ds.herokuapp.com/api/forward-geocoding?search=${address}`;
      const res = await fetch(url);
      const { data } = await res.json();
      const { latitude, longitude } = data[0];
      getTweets(latitude, longitude);
    } catch (err) {
      console.log(err);
    }
  }

  // Fun√ß√£o de busca dos tweets com base na latitude e longitude
  // obtidas atrav√©s da API de geolocaliza√ß√£o
  const getTweets = async (lat, long) => {
    try {
      const url = `https://geo-trending-ds.herokuapp.com/api/get-tweets?lat=${lat}&long=${long}`;
      const res = await fetch(url);
      const response = await res.json();
      setTweets(response.statuses);
    } catch (err) {
      console.log(err);
    }
  };

  // Hook do react para fazer a primeira busca por endere√ßo
  // Essa busca s√≥ ser√° realizada uma √∫nica vez no load da aplica√ß√£o
  // A busca ser√° realizada com base no endere√ßo padr√£o (Rio+Grande+RS)
  // O ponto de entrada das demais buscas √© a fun√ß√£o changeAddressHandler
  useEffect(() => {
    getGeoLocation(address);
  }, []);

  // O retorno do componente √© um objeto JSX que ser√° renderizado em tela
  return (
    <div className={styles.container}>
      <div className={styles.column}>
        {/* Defini√ß√£o do header principal da p√°gina */}
        <h1 className={styles.title}>Geo Trending üåç</h1>

        {/* Nesse trecho √© criada a barra de busca. Atrav√©s dela, o usu√°rio pode inserir o endere√ßo desejado */}
        <input
          className={styles.search}
          type='text'
          placeholder='Busque tweets perto de voc√™'
          onChange={changeAddressHandler}/>

        {/* Utiliza√ß√£o da API Maps Embed da Google para exibir no mapa o endere√ßo inputado pelo usu√°rio*/}
        <iframe
          className={styles.map}
          height='450'
          loading='lazy'
          allowFullScreen
          referrerPolicy='no-referrer-when-downgrade'
          src={`https://www.google.com/maps/embed/v1/place?key=${googleMapsAPIKey}&q=${address}`}/>
      </div>
      <div className={styles.column}>
        {/* Aqui √© feita a valida√ß√£o do vetor tweets. Caso ele esteja vazio, mostra-se a tela de carregamento */}
        {/* Caso contr√°rio, renderiza-se os tweets */}
        { tweets.length === 0 
          // Nesse trecho √© renderiza a tela de carregamento
          ? <SkeletonTweets/>
          // Nesse trecho √© feita a renderiza√ß√£o dos tweets carregados atrav√©s da API
          // Utiliza-se um componente personalizado Tweet, que pode ser encontrado em components/tweet
          : tweets.map((el) => <Tweet key={el.id} data={el}/>) 
        }
      </div>
    </div>
  );
}
